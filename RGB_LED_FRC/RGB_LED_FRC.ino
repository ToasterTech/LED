#define REDPIN 3        //Set up the corresponding value of transistor switch pins on Arduino outputs.
#define BLUEPIN 5
#define GREENPIN 6
int currentmode = 1;    //Set up a global variable for mode (BLUE,RED or RAINBOW)
int in1, in2;

const uint8_t lights[360]={
255.0000 , 254.9563 , 254.8253,  254.6070,  254.3015,  253.9092,  253.4303 , 252.8650 , 252.2138,  251.4772 , 250.6555,
249.7495 , 248.7597 , 247.6868,  246.5315,  245.2946,  243.9770,  242.5796 , 241.1033 , 239.5492 , 237.9182 , 236.2116,
234.4305 , 232.5761 , 230.6497,  228.6526,  226.5861,  224.4518,  222.2510 , 219.9852 , 217.6561 , 215.2652 , 212.8142,
210.3046 , 207.7383 , 205.1171,  202.4426,  199.7168,  196.9415,  194.1186 , 191.2500 , 188.3377 , 185.3838 , 182.3902,
179.3589 , 176.2921 , 173.1919,  170.0604,  166.8997,  163.7120,  160.4994 , 157.2643 , 154.0087 , 150.7350 , 147.4454,
144.1421 , 140.8274 , 137.5035,  134.1728,  130.8376,  127.5000,  124.1624 , 120.8272 , 117.4965 , 114.1726 , 110.8579,
107.5546 , 104.2650 , 100.9913,   97.7357,   94.5006,   91.2880,   88.1003 ,  84.9396 ,  81.8081 ,  78.7079 ,  75.6411,
72.6098  , 69.6162  , 66.6623 ,  63.7500 ,  60.8814 ,  58.0585 ,  55.2832  , 52.5574  , 49.8829  , 47.2617  , 44.6954,
42.1858  , 39.7348  , 37.3439 ,  35.0148 ,  32.7490 ,  30.5482 ,  28.4139  , 26.3474  , 24.3503  , 22.4239  , 20.5695,
18.7884  , 17.0818  , 15.4508 ,  13.8967 ,  12.4204 ,  11.0230 ,   9.7054  ,  8.4685  ,  7.3132  ,  6.2403  ,  5.2505,
4.3445   , 3.5228   , 2.7862  ,  2.1350  ,  1.5697  ,  1.0908  ,  0.6985   , 0.3930   , 0.1747   , 0.0437  ,  0.0000,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0    ,0.0437    ,0.1747    ,0.3930,    0.6985,    1.0908,    1.5697,    2.1350,    2.7862,    3.5228 ,   4.3445,
5.2505,    6.2403,    7.3132  ,  8.4685  ,  9.7054  , 11.0230  , 12.4204  , 13.8967  , 15.4508 ,  17.0818 ,  18.7884,
20.5695,   22.4239,   24.3503 ,  26.3474 ,  28.4139 ,  30.5482 ,  32.7490 ,  35.0148 ,  37.3439,   39.7348,   42.1858,
44.6954 ,  47.2617 ,  49.8829 , 52.5574  , 55.2832  , 58.0585  , 60.8814  , 63.7500  , 66.6623 ,  69.6162,   72.6098,
75.6411  , 78.7079 ,  81.8081 ,  84.9396 ,  88.1003 ,  91.2880 ,  94.5006 ,  97.7357 , 100.9913 , 104.2650,  107.5546,
110.8579,  114.1726,  117.4965,  120.8272,  124.1624,  127.5000,  130.8376,  134.1728,  137.5035,  140.8274,  144.1421,
147.4454,  150.7350,  154.0087,  157.2643,  160.4994,  163.7120,  166.8997,  170.0604,  173.1919,  176.2921,  179.3589,
182.3902,  185.3838,  188.3377,  191.2500,  194.1186,  196.9415,  199.7168,  202.4426,  205.1171,  207.7383,  210.3046,
212.8142,  215.2652,  217.6561,  219.9852,  222.2510,  224.4518,  226.5861,  228.6526,  230.6497,  232.5761,  234.4305,
236.2116,  237.9182,  239.5492,  241.1033,  242.5796,  243.9770,  245.2946,  246.5315,  247.6868,  248.7597,  249.7495,
250.6555,  251.4772,  252.2138,  252.8650,  253.4303,  253.9092,  254.3015,  254.6070,  254.8253,  254.9563,  255.0000};


const uint8_t HSVlights[61] ={0, 4, 8, 13, 17, 21, 25, 30, 34, 38, 42, 47, 51, 55, 59, 64, 68, 72, 76,
81, 85, 89, 93, 98, 102, 106, 110, 115, 119, 123, 127, 132, 136, 140, 144,
149, 153, 157, 161, 166, 170, 174, 178, 183, 187, 191, 195, 200, 204, 208,
212, 217, 221, 225, 229, 234, 238, 242, 246, 251, 255};

const uint8_t HSVpower[121] ={0, 2, 4, 6, 8, 11, 13, 15, 17, 19, 21, 23, 25, 28, 30, 32, 34, 36, 38, 40,
42, 45, 47, 49, 51, 53, 55, 57, 59, 62, 64, 66, 68, 70, 72, 74, 76, 79, 81,
83, 85, 87, 89, 91, 93, 96, 98, 100, 102, 104, 106, 108, 110, 113, 115, 117,
119, 121, 123, 125, 127, 130, 132, 134, 136, 138, 140, 142, 144, 147, 149,
151, 153, 155, 157, 159, 161, 164, 166, 168, 170, 172, 174, 176, 178, 181,
183, 185, 187, 189, 191, 193, 195, 198, 200, 202, 204, 206, 208, 210, 212,
215, 217, 219, 221, 223, 225, 227, 229, 232, 234, 236, 238, 240, 242, 244,
246, 249, 251, 253, 255};




void setup() {
pinMode(REDPIN,OUTPUT); //Robot start from GREEN
pinMode(GREENPIN,OUTPUT);
pinMode(BLUEPIN,OUTPUT);
resetled();

pinMode(8, INPUT);   //Digital in from roboRio
pinMode(11, INPUT);
Serial.begin(9600);
}

void loop() {
  
  in1 = digitalRead(8); //This section is for the situation under poor connection of button that interrupt doesnot work.
  in2 = digitalRead(11);
  Serial.print("in1 is ");
  Serial.println(in1);
  Serial.print("in2 is ");
  Serial.println(in2);
  
  if (in1 == LOW && in2 == LOW)
  {
    resetled();
    showred();
    delay(1000);
    showblue();
    delay(1000);
  }
  else if (in1 == LOW && in2 == HIGH)
  {
    showred();
  }
  else if (in1 == HIGH && in2 == LOW)
  {
    showblue();
  }
  else //essentially HIGH HIGH
  {
    //showblue();
    resetled();
    showrainbow();
  }
  
  //delay(50);*/
  //showrainbow();
  
}

void showblue()
{
analogWrite(REDPIN,0); //Toaster Tech (Alliance) Blue
analogWrite(GREENPIN,0);
analogWrite(BLUEPIN,255);
}

void showred()
{
analogWrite(REDPIN,255); // Alliance Red
analogWrite(GREENPIN,0);
analogWrite(BLUEPIN,0);
}

void showrainbow()
{
  for (int k=0; k<360; k++)
  {
  trueHSV(REDPIN, k);
  delay(30);
  }
}

void resetled()
{
  analogWrite(REDPIN,0);
  analogWrite(BLUEPIN,0);
  analogWrite(GREENPIN,0);
}

void setRGBpoint(byte LED, uint8_t red, uint8_t green, uint8_t blue)
{
  // this code is for common anode LEDs. If you use common cathode ones,
  // remove the '255-' bits.
  analogWrite(LED, red);
  analogWrite(LED+2, green);
  analogWrite(LED+3, blue);
}

void trueHSV(byte LED, int angle)
{
  byte red, green, blue;


  if (angle<60) {red = 255; green = HSVlights[angle]; blue = 0;} else
  if (angle<120) {red = HSVlights[120-angle]; green = 255; blue = 0;} else
  if (angle<180) {red = 0, green = 255; blue = HSVlights[angle-120];} else
  if (angle<240) {red = 0, green = HSVlights[240-angle]; blue = 255;} else
  if (angle<300) {red = HSVlights[angle-240], green = 0; blue = 255;} else
                 {red = 255, green = 0; blue = HSVlights[360-angle];}
                 
  setRGBpoint(LED, red, green, blue);
}
